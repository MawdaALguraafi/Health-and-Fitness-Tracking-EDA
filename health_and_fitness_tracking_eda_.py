# -*- coding: utf-8 -*-
"""Health and Fitness Tracking EDA .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nw-qjaxpccOb_PNeghnVz5_YgS6t48Pi

## Health and Fitness Tracking 365 Days for 1000 User Datasets

## EDA
"""

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset and show first rows
df = pd.read_csv("/content/health_fitness_tracking_365days.csv")
df.head()

# Show number of rows and columns(268378, 12)
df.shape

# Show dataset info columns and type
df.info()

# Check missing values in each column
df.isnull().sum()

# Check for duplicated rows
df.duplicated()

# Show data types of each column
df.dtypes

# Show summary statistics for numeric columns
df.describe()

# Convert date'column to datetime format
df["date"] = pd.to_datetime(df["date"])

# Extract year and month from date
df["year"] = df["date"].dt.year
df["month"] = df["date"].dt.month

# Sort dataset by steps in ascending order
df_sorted_steps = df.sort_values("steps")
df_sorted_steps

# Sort dataset by calories burned in descending order
df_sorted_cal = df.sort_values("calories_burned", ascending=False)
df_sorted_cal

# Sort dataset by date (ascending) and steps (descending)
df_sorted_multi = df.sort_values(["date", "steps"], ascending=[True, False])
df_sorted_multi

# Filter data: low heart rate, low stress and enough sleep
# Then sort by average heart rate
res_b = (
    df[(df["heart_rate_avg"] < 60) & (df["stress_level"] <= 3) & (df["sleep_hours"] >= 7)]
    .sort_values("heart_rate_avg")
)
res_b

# Select first 3 rows and only specific columns (date, steps, sleep_hours)
df_splice = df.loc[:2, ["date", "steps", "sleep_hours"]]
df_splice

# Filter rows where steps are greater than 10000
mask = df["steps"] > 10000
df_high_steps = df[mask]
df_high_steps

# Calculate aggregate stats (mean, std, min, max) for steps and sleep_hours
agg_stats = df[["steps", "sleep_hours"]].agg(["mean", "std", "min", "max"])
agg_stats

# Aggregate monthly stats: mean steps, mean sleep, total calories, total exercise, and days count
agg_user_month = (
    df.groupby(["month"])
      .agg(steps_mean=("steps","mean"),
           sleep_mean=("sleep_hours","mean"),
           cal_sum=("calories_burned","sum"),
           ex_sum=("exercise_minutes","sum"),
           days=("date","nunique"))
      .reset_index()
)
agg_user_month.head()

# Add new column: sleep percentage of 24 hours
df["sleep_pct"] = df["sleep_hours"].transform(lambda x: (x / 24) * 100)
df[["date", "sleep_hours", "sleep_pct"]]

# Create stress label column based on stress level values
df["stress_label"] = df["stress_level"].apply(
    lambda x: "Low" if x <= 3 else ("Medium" if x <= 6 else "High")
)

df[["date", "stress_level", "stress_label"]]

# Filter rows where avg heart rate < 60 and sleep hours > 7
df_query = df.query("heart_rate_avg < 60 and sleep_hours > 7")
df_query

# Group by user_id and calculate mean of steps and sleep_hours
grouped = df.groupby("user_id")[["steps", "sleep_hours",'stress_level']].mean()
grouped

"""## Data Visualization"""

# Plot histogram of daily steps
plt.hist(df["steps"], bins=20)
plt.xlabel("Steps")
plt.ylabel("Frequency")
plt.title("Distribution of Daily Steps")
plt.show()

# Bar chart: Mean steps by stress level
mean_steps = df.groupby("stress_level")["steps"].mean()

plt.figure(figsize=(7,5))
plt.bar(mean_steps.index.astype(str), mean_steps.values)
plt.title("Mean Steps by Stress Level")
plt.xlabel("Stress Level")
plt.ylabel("Mean Steps")
plt.tight_layout()
plt.show()

plt.figure()
plt.scatter(
    df["steps"],
    df["calories_burned"],
    c=df["stress_level"],
    cmap="viridis",
    s=100
)
plt.colorbar(label="Stress Level")
plt.title("Steps vs Calories Burned (colored by Stress Level)")
plt.xlabel("Steps")
plt.ylabel("Calories Burned")
plt.tight_layout()
plt.show()

# Boxplot of sleep hours distribution
sns.boxplot(x="sleep_hours", data=df)
plt.title("Sleep Hours Distribution")
plt.show()

# Boxplot heart rate by stress level
plt.figure(figsize=(7,5))
sns.boxplot(x="stress_label", y="heart_rate_avg", data=df)
plt.title("Heart Rate Distribution by Stress Level")
plt.xlabel("Stress Level")
plt.ylabel("Average Heart Rate")
plt.show()

# Pie chart of stress level distribution
stress_counts = df["stress_level"].value_counts()

plt.figure()
plt.pie(
    stress_counts,
    labels=stress_counts.index,
    autopct="%1.1f%%",   # show percentage
    startangle=90        # rotate start angle
)
plt.title("Distribution of Stress Levels")
plt.show()

# Pie chart of gender distribution
gender_counts = df["gender"].value_counts()

plt.figure()
plt.pie(
    gender_counts,
    labels=gender_counts.index,     # show gender labels
    autopct="%1.1f%%",              # show percentage
    startangle=90,                  # rotate start angle
    wedgeprops={"edgecolor": "white"}  # add white border between slices
)
plt.title("Distribution of Gender")
plt.show()